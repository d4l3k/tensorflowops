// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow/core/framework/api_def.proto

package framework

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ApiDef_Visibility int32

const (
	// Normally this is "VISIBLE" unless you are inheriting a
	// different value from another ApiDef.
	DEFAULT_VISIBILITY ApiDef_Visibility = 0
	// Publicly visible in the API.
	VISIBLE ApiDef_Visibility = 1
	// Do not include this op in the generated API. If visibility is
	// set to 'SKIP', other fields are ignored for this op.
	SKIP ApiDef_Visibility = 2
	// Hide this op by putting it into an internal namespace (or whatever
	// is appropriate in the target language).
	HIDDEN ApiDef_Visibility = 3
)

var ApiDef_Visibility_name = map[int32]string{
	0: "DEFAULT_VISIBILITY",
	1: "VISIBLE",
	2: "SKIP",
	3: "HIDDEN",
}
var ApiDef_Visibility_value = map[string]int32{
	"DEFAULT_VISIBILITY": 0,
	"VISIBLE":            1,
	"SKIP":               2,
	"HIDDEN":             3,
}

func (ApiDef_Visibility) EnumDescriptor() ([]byte, []int) { return fileDescriptorApiDef, []int{0, 0} }

// Used to specify and override the default API & behavior in the
// generated code for client languages, from what you would get from
// the OpDef alone. There will be a set of ApiDefs that are common
// to all client languages, and another set per client language.
// The per-client-language ApiDefs will inherit values from the
// common ApiDefs which it can either replace or modify.
//
// We separate the API definition from the OpDef so we can evolve the
// API while remaining backwards compatible when interpretting old
// graphs.  Overrides go in an "api_def.pbtxt" file with a text-format
// ApiDefs message.
//
// WARNING: Be *very* careful changing the API for any existing op --
// you can change the semantics of existing code.  These changes may
// need to wait until a major release of TensorFlow to avoid breaking
// our compatibility promises.
type ApiDef struct {
	// Name of the op (in the OpDef) to specify the API for.
	GraphOpName string             `protobuf:"bytes,1,opt,name=graph_op_name,json=graphOpName,proto3" json:"graph_op_name,omitempty"`
	Visibility  ApiDef_Visibility  `protobuf:"varint,2,opt,name=visibility,proto3,enum=tensorflow.ApiDef_Visibility" json:"visibility,omitempty"`
	Endpoint    []*ApiDef_Endpoint `protobuf:"bytes,3,rep,name=endpoint" json:"endpoint,omitempty"`
	InArg       []*ApiDef_Arg      `protobuf:"bytes,4,rep,name=in_arg,json=inArg" json:"in_arg,omitempty"`
	OutArg      []*ApiDef_Arg      `protobuf:"bytes,5,rep,name=out_arg,json=outArg" json:"out_arg,omitempty"`
	// List of original in_arg names to specify new argument order.
	// Length of arg_order should be either empty to keep current order
	// or match size of in_arg.
	ArgOrder []string       `protobuf:"bytes,11,rep,name=arg_order,json=argOrder" json:"arg_order,omitempty"`
	Attr     []*ApiDef_Attr `protobuf:"bytes,6,rep,name=attr" json:"attr,omitempty"`
	// One-line human-readable description of what the Op does.
	Summary string `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
	// Additional, longer human-readable description of what the Op does.
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	// Modify an existing/inherited description by adding text to the beginning
	// or end.
	DescriptionPrefix string `protobuf:"bytes,9,opt,name=description_prefix,json=descriptionPrefix,proto3" json:"description_prefix,omitempty"`
	DescriptionSuffix string `protobuf:"bytes,10,opt,name=description_suffix,json=descriptionSuffix,proto3" json:"description_suffix,omitempty"`
}

func (m *ApiDef) Reset()                    { *m = ApiDef{} }
func (*ApiDef) ProtoMessage()               {}
func (*ApiDef) Descriptor() ([]byte, []int) { return fileDescriptorApiDef, []int{0} }

func (m *ApiDef) GetGraphOpName() string {
	if m != nil {
		return m.GraphOpName
	}
	return ""
}

func (m *ApiDef) GetVisibility() ApiDef_Visibility {
	if m != nil {
		return m.Visibility
	}
	return DEFAULT_VISIBILITY
}

func (m *ApiDef) GetEndpoint() []*ApiDef_Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *ApiDef) GetInArg() []*ApiDef_Arg {
	if m != nil {
		return m.InArg
	}
	return nil
}

func (m *ApiDef) GetOutArg() []*ApiDef_Arg {
	if m != nil {
		return m.OutArg
	}
	return nil
}

func (m *ApiDef) GetArgOrder() []string {
	if m != nil {
		return m.ArgOrder
	}
	return nil
}

func (m *ApiDef) GetAttr() []*ApiDef_Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *ApiDef) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *ApiDef) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ApiDef) GetDescriptionPrefix() string {
	if m != nil {
		return m.DescriptionPrefix
	}
	return ""
}

func (m *ApiDef) GetDescriptionSuffix() string {
	if m != nil {
		return m.DescriptionSuffix
	}
	return ""
}

// If you specify any endpoint, this will replace all of the
// inherited endpoints.  The first endpoint should be the
// "canonical" endpoint, and should not be deprecated (unless all
// endpoints are deprecated).
type ApiDef_Endpoint struct {
	// Name should be either like "CamelCaseName" or
	// "Package.CamelCaseName". Client-language-specific ApiDefs may
	// use a snake_case convention instead of CamelCase.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If this endpoint is deprecated, set deprecation_message to a
	// message that should be logged when the endpoint is used.
	// The message should indicate alternative endpoint to use, if any.
	DeprecationMessage string `protobuf:"bytes,2,opt,name=deprecation_message,json=deprecationMessage,proto3" json:"deprecation_message,omitempty"`
}

func (m *ApiDef_Endpoint) Reset()                    { *m = ApiDef_Endpoint{} }
func (*ApiDef_Endpoint) ProtoMessage()               {}
func (*ApiDef_Endpoint) Descriptor() ([]byte, []int) { return fileDescriptorApiDef, []int{0, 0} }

func (m *ApiDef_Endpoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApiDef_Endpoint) GetDeprecationMessage() string {
	if m != nil {
		return m.DeprecationMessage
	}
	return ""
}

type ApiDef_Arg struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Change the name used to access this arg in the API from what
	// is used in the GraphDef.  Note that these names in `backticks`
	// will also be replaced in the summary & description fields.
	RenameTo string `protobuf:"bytes,2,opt,name=rename_to,json=renameTo,proto3" json:"rename_to,omitempty"`
	// Note: this will replace any inherited arg doc. There is no
	// current way of modifying arg descriptions (other than replacing
	// them entirely) as can be done with op descriptions.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *ApiDef_Arg) Reset()                    { *m = ApiDef_Arg{} }
func (*ApiDef_Arg) ProtoMessage()               {}
func (*ApiDef_Arg) Descriptor() ([]byte, []int) { return fileDescriptorApiDef, []int{0, 1} }

func (m *ApiDef_Arg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApiDef_Arg) GetRenameTo() string {
	if m != nil {
		return m.RenameTo
	}
	return ""
}

func (m *ApiDef_Arg) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// Description of the graph-construction-time configuration of this
// Op.  That is to say, this describes the attr fields that will
// be specified in the NodeDef.
type ApiDef_Attr struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Change the name used to access this attr in the API from what
	// is used in the GraphDef.  Note that these names in `backticks`
	// will also be replaced in the summary & description fields.
	RenameTo string `protobuf:"bytes,2,opt,name=rename_to,json=renameTo,proto3" json:"rename_to,omitempty"`
	// Specify a new default value to use for this attr.  This default
	// will be used when creating new graphs, as opposed to the
	// default in the OpDef, which will be used when interpreting old
	// GraphDefs.
	DefaultValue *AttrValue `protobuf:"bytes,3,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	// Note: this will replace any inherited attr doc, there is no current
	// way of modifying attr descriptions as can be done with op descriptions.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *ApiDef_Attr) Reset()                    { *m = ApiDef_Attr{} }
func (*ApiDef_Attr) ProtoMessage()               {}
func (*ApiDef_Attr) Descriptor() ([]byte, []int) { return fileDescriptorApiDef, []int{0, 2} }

func (m *ApiDef_Attr) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApiDef_Attr) GetRenameTo() string {
	if m != nil {
		return m.RenameTo
	}
	return ""
}

func (m *ApiDef_Attr) GetDefaultValue() *AttrValue {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (m *ApiDef_Attr) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ApiDefs struct {
	Op []*ApiDef `protobuf:"bytes,1,rep,name=op" json:"op,omitempty"`
}

func (m *ApiDefs) Reset()                    { *m = ApiDefs{} }
func (*ApiDefs) ProtoMessage()               {}
func (*ApiDefs) Descriptor() ([]byte, []int) { return fileDescriptorApiDef, []int{1} }

func (m *ApiDefs) GetOp() []*ApiDef {
	if m != nil {
		return m.Op
	}
	return nil
}

func init() {
	proto.RegisterType((*ApiDef)(nil), "tensorflow.ApiDef")
	proto.RegisterType((*ApiDef_Endpoint)(nil), "tensorflow.ApiDef.Endpoint")
	proto.RegisterType((*ApiDef_Arg)(nil), "tensorflow.ApiDef.Arg")
	proto.RegisterType((*ApiDef_Attr)(nil), "tensorflow.ApiDef.Attr")
	proto.RegisterType((*ApiDefs)(nil), "tensorflow.ApiDefs")
	proto.RegisterEnum("tensorflow.ApiDef_Visibility", ApiDef_Visibility_name, ApiDef_Visibility_value)
}
func (x ApiDef_Visibility) String() string {
	s, ok := ApiDef_Visibility_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ApiDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiDef)
	if !ok {
		that2, ok := that.(ApiDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GraphOpName != that1.GraphOpName {
		return false
	}
	if this.Visibility != that1.Visibility {
		return false
	}
	if len(this.Endpoint) != len(that1.Endpoint) {
		return false
	}
	for i := range this.Endpoint {
		if !this.Endpoint[i].Equal(that1.Endpoint[i]) {
			return false
		}
	}
	if len(this.InArg) != len(that1.InArg) {
		return false
	}
	for i := range this.InArg {
		if !this.InArg[i].Equal(that1.InArg[i]) {
			return false
		}
	}
	if len(this.OutArg) != len(that1.OutArg) {
		return false
	}
	for i := range this.OutArg {
		if !this.OutArg[i].Equal(that1.OutArg[i]) {
			return false
		}
	}
	if len(this.ArgOrder) != len(that1.ArgOrder) {
		return false
	}
	for i := range this.ArgOrder {
		if this.ArgOrder[i] != that1.ArgOrder[i] {
			return false
		}
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if !this.Attr[i].Equal(that1.Attr[i]) {
			return false
		}
	}
	if this.Summary != that1.Summary {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.DescriptionPrefix != that1.DescriptionPrefix {
		return false
	}
	if this.DescriptionSuffix != that1.DescriptionSuffix {
		return false
	}
	return true
}
func (this *ApiDef_Endpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiDef_Endpoint)
	if !ok {
		that2, ok := that.(ApiDef_Endpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.DeprecationMessage != that1.DeprecationMessage {
		return false
	}
	return true
}
func (this *ApiDef_Arg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiDef_Arg)
	if !ok {
		that2, ok := that.(ApiDef_Arg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.RenameTo != that1.RenameTo {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *ApiDef_Attr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiDef_Attr)
	if !ok {
		that2, ok := that.(ApiDef_Attr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.RenameTo != that1.RenameTo {
		return false
	}
	if !this.DefaultValue.Equal(that1.DefaultValue) {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *ApiDefs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiDefs)
	if !ok {
		that2, ok := that.(ApiDefs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Op) != len(that1.Op) {
		return false
	}
	for i := range this.Op {
		if !this.Op[i].Equal(that1.Op[i]) {
			return false
		}
	}
	return true
}
func (this *ApiDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&framework.ApiDef{")
	s = append(s, "GraphOpName: "+fmt.Sprintf("%#v", this.GraphOpName)+",\n")
	s = append(s, "Visibility: "+fmt.Sprintf("%#v", this.Visibility)+",\n")
	if this.Endpoint != nil {
		s = append(s, "Endpoint: "+fmt.Sprintf("%#v", this.Endpoint)+",\n")
	}
	if this.InArg != nil {
		s = append(s, "InArg: "+fmt.Sprintf("%#v", this.InArg)+",\n")
	}
	if this.OutArg != nil {
		s = append(s, "OutArg: "+fmt.Sprintf("%#v", this.OutArg)+",\n")
	}
	s = append(s, "ArgOrder: "+fmt.Sprintf("%#v", this.ArgOrder)+",\n")
	if this.Attr != nil {
		s = append(s, "Attr: "+fmt.Sprintf("%#v", this.Attr)+",\n")
	}
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "DescriptionPrefix: "+fmt.Sprintf("%#v", this.DescriptionPrefix)+",\n")
	s = append(s, "DescriptionSuffix: "+fmt.Sprintf("%#v", this.DescriptionSuffix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiDef_Endpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&framework.ApiDef_Endpoint{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "DeprecationMessage: "+fmt.Sprintf("%#v", this.DeprecationMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiDef_Arg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&framework.ApiDef_Arg{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "RenameTo: "+fmt.Sprintf("%#v", this.RenameTo)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiDef_Attr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&framework.ApiDef_Attr{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "RenameTo: "+fmt.Sprintf("%#v", this.RenameTo)+",\n")
	if this.DefaultValue != nil {
		s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	}
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiDefs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&framework.ApiDefs{")
	if this.Op != nil {
		s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApiDef(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ApiDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GraphOpName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(len(m.GraphOpName)))
		i += copy(dAtA[i:], m.GraphOpName)
	}
	if m.Visibility != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(m.Visibility))
	}
	if len(m.Endpoint) > 0 {
		for _, msg := range m.Endpoint {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApiDef(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.InArg) > 0 {
		for _, msg := range m.InArg {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApiDef(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OutArg) > 0 {
		for _, msg := range m.OutArg {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintApiDef(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Attr) > 0 {
		for _, msg := range m.Attr {
			dAtA[i] = 0x32
			i++
			i = encodeVarintApiDef(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Summary) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(len(m.Summary)))
		i += copy(dAtA[i:], m.Summary)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.DescriptionPrefix) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(len(m.DescriptionPrefix)))
		i += copy(dAtA[i:], m.DescriptionPrefix)
	}
	if len(m.DescriptionSuffix) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(len(m.DescriptionSuffix)))
		i += copy(dAtA[i:], m.DescriptionSuffix)
	}
	if len(m.ArgOrder) > 0 {
		for _, s := range m.ArgOrder {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ApiDef_Endpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiDef_Endpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.DeprecationMessage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(len(m.DeprecationMessage)))
		i += copy(dAtA[i:], m.DeprecationMessage)
	}
	return i, nil
}

func (m *ApiDef_Arg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiDef_Arg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.RenameTo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(len(m.RenameTo)))
		i += copy(dAtA[i:], m.RenameTo)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *ApiDef_Attr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiDef_Attr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.RenameTo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(len(m.RenameTo)))
		i += copy(dAtA[i:], m.RenameTo)
	}
	if m.DefaultValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(m.DefaultValue.Size()))
		n1, err := m.DefaultValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApiDef(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *ApiDefs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiDefs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Op) > 0 {
		for _, msg := range m.Op {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiDef(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintApiDef(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ApiDef) Size() (n int) {
	var l int
	_ = l
	l = len(m.GraphOpName)
	if l > 0 {
		n += 1 + l + sovApiDef(uint64(l))
	}
	if m.Visibility != 0 {
		n += 1 + sovApiDef(uint64(m.Visibility))
	}
	if len(m.Endpoint) > 0 {
		for _, e := range m.Endpoint {
			l = e.Size()
			n += 1 + l + sovApiDef(uint64(l))
		}
	}
	if len(m.InArg) > 0 {
		for _, e := range m.InArg {
			l = e.Size()
			n += 1 + l + sovApiDef(uint64(l))
		}
	}
	if len(m.OutArg) > 0 {
		for _, e := range m.OutArg {
			l = e.Size()
			n += 1 + l + sovApiDef(uint64(l))
		}
	}
	if len(m.Attr) > 0 {
		for _, e := range m.Attr {
			l = e.Size()
			n += 1 + l + sovApiDef(uint64(l))
		}
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovApiDef(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApiDef(uint64(l))
	}
	l = len(m.DescriptionPrefix)
	if l > 0 {
		n += 1 + l + sovApiDef(uint64(l))
	}
	l = len(m.DescriptionSuffix)
	if l > 0 {
		n += 1 + l + sovApiDef(uint64(l))
	}
	if len(m.ArgOrder) > 0 {
		for _, s := range m.ArgOrder {
			l = len(s)
			n += 1 + l + sovApiDef(uint64(l))
		}
	}
	return n
}

func (m *ApiDef_Endpoint) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApiDef(uint64(l))
	}
	l = len(m.DeprecationMessage)
	if l > 0 {
		n += 1 + l + sovApiDef(uint64(l))
	}
	return n
}

func (m *ApiDef_Arg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApiDef(uint64(l))
	}
	l = len(m.RenameTo)
	if l > 0 {
		n += 1 + l + sovApiDef(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApiDef(uint64(l))
	}
	return n
}

func (m *ApiDef_Attr) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApiDef(uint64(l))
	}
	l = len(m.RenameTo)
	if l > 0 {
		n += 1 + l + sovApiDef(uint64(l))
	}
	if m.DefaultValue != nil {
		l = m.DefaultValue.Size()
		n += 1 + l + sovApiDef(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApiDef(uint64(l))
	}
	return n
}

func (m *ApiDefs) Size() (n int) {
	var l int
	_ = l
	if len(m.Op) > 0 {
		for _, e := range m.Op {
			l = e.Size()
			n += 1 + l + sovApiDef(uint64(l))
		}
	}
	return n
}

func sovApiDef(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApiDef(x uint64) (n int) {
	return sovApiDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ApiDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiDef{`,
		`GraphOpName:` + fmt.Sprintf("%v", this.GraphOpName) + `,`,
		`Visibility:` + fmt.Sprintf("%v", this.Visibility) + `,`,
		`Endpoint:` + strings.Replace(fmt.Sprintf("%v", this.Endpoint), "ApiDef_Endpoint", "ApiDef_Endpoint", 1) + `,`,
		`InArg:` + strings.Replace(fmt.Sprintf("%v", this.InArg), "ApiDef_Arg", "ApiDef_Arg", 1) + `,`,
		`OutArg:` + strings.Replace(fmt.Sprintf("%v", this.OutArg), "ApiDef_Arg", "ApiDef_Arg", 1) + `,`,
		`Attr:` + strings.Replace(fmt.Sprintf("%v", this.Attr), "ApiDef_Attr", "ApiDef_Attr", 1) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`DescriptionPrefix:` + fmt.Sprintf("%v", this.DescriptionPrefix) + `,`,
		`DescriptionSuffix:` + fmt.Sprintf("%v", this.DescriptionSuffix) + `,`,
		`ArgOrder:` + fmt.Sprintf("%v", this.ArgOrder) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiDef_Endpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiDef_Endpoint{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DeprecationMessage:` + fmt.Sprintf("%v", this.DeprecationMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiDef_Arg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiDef_Arg{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`RenameTo:` + fmt.Sprintf("%v", this.RenameTo) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiDef_Attr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiDef_Attr{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`RenameTo:` + fmt.Sprintf("%v", this.RenameTo) + `,`,
		`DefaultValue:` + strings.Replace(fmt.Sprintf("%v", this.DefaultValue), "AttrValue", "AttrValue", 1) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiDefs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiDefs{`,
		`Op:` + strings.Replace(fmt.Sprintf("%v", this.Op), "ApiDef", "ApiDef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApiDef(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ApiDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphOpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphOpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			m.Visibility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Visibility |= (ApiDef_Visibility(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = append(m.Endpoint, &ApiDef_Endpoint{})
			if err := m.Endpoint[len(m.Endpoint)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InArg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InArg = append(m.InArg, &ApiDef_Arg{})
			if err := m.InArg[len(m.InArg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutArg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutArg = append(m.OutArg, &ApiDef_Arg{})
			if err := m.OutArg[len(m.OutArg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attr = append(m.Attr, &ApiDef_Attr{})
			if err := m.Attr[len(m.Attr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptionPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionSuffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptionSuffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArgOrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArgOrder = append(m.ArgOrder, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiDef_Endpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecationMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecationMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiDef_Arg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenameTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenameTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiDef_Attr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenameTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenameTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultValue == nil {
				m.DefaultValue = &AttrValue{}
			}
			if err := m.DefaultValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiDefs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiDefs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiDefs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = append(m.Op, &ApiDef{})
			if err := m.Op[len(m.Op)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApiDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApiDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApiDef
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApiDef
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApiDef(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApiDef = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApiDef   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tensorflow/core/framework/api_def.proto", fileDescriptorApiDef) }

var fileDescriptorApiDef = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x49, 0xea, 0x24, 0x2f, 0x2d, 0x0a, 0x87, 0x28, 0x56, 0x2a, 0xac, 0x28, 0x0b,
	0x11, 0xa8, 0x89, 0x54, 0x06, 0x24, 0xa4, 0x0e, 0xa9, 0x12, 0x20, 0xa2, 0xb4, 0x91, 0x5b, 0x2a,
	0x60, 0xb1, 0xae, 0xc9, 0xd9, 0x3d, 0x11, 0xfb, 0x4e, 0xe7, 0x73, 0x4b, 0x37, 0x3e, 0x02, 0x0b,
	0x12, 0x1f, 0x81, 0x8f, 0xc2, 0xd8, 0x91, 0x91, 0x9a, 0x85, 0xb1, 0x03, 0x03, 0x23, 0xf2, 0xb9,
	0x6d, 0x4c, 0x12, 0x55, 0x62, 0xbb, 0x77, 0xef, 0xf7, 0xff, 0xdb, 0xfa, 0xdf, 0xbb, 0x83, 0x07,
	0x8a, 0x06, 0x21, 0x97, 0xee, 0x84, 0x9f, 0x74, 0x46, 0x5c, 0xd2, 0x8e, 0x2b, 0x89, 0x4f, 0x4f,
	0xb8, 0x7c, 0xdf, 0x21, 0x82, 0x39, 0x63, 0xea, 0xb6, 0x85, 0xe4, 0x8a, 0x63, 0x98, 0x82, 0xf5,
	0x87, 0x37, 0x88, 0x94, 0x92, 0xce, 0x31, 0x99, 0x44, 0x34, 0xd5, 0x35, 0x7f, 0x1b, 0x60, 0x74,
	0x05, 0xeb, 0x51, 0x17, 0x37, 0x61, 0xc5, 0x93, 0x44, 0x1c, 0x39, 0x5c, 0x38, 0x01, 0xf1, 0xa9,
	0x89, 0x1a, 0xa8, 0x55, 0xb1, 0xab, 0x7a, 0x73, 0x57, 0xec, 0x10, 0x9f, 0xe2, 0x4d, 0x80, 0x63,
	0x16, 0xb2, 0x43, 0x36, 0x61, 0xea, 0xd4, 0xcc, 0x37, 0x50, 0xeb, 0xd6, 0xc6, 0xfd, 0xf6, 0xf4,
	0x7b, 0xed, 0xd4, 0xab, 0x7d, 0x70, 0x0d, 0xd9, 0x19, 0x01, 0x7e, 0x02, 0x65, 0x1a, 0x8c, 0x05,
	0x67, 0x81, 0x32, 0x0b, 0x8d, 0x42, 0xab, 0xba, 0xb1, 0xb6, 0x40, 0xdc, 0xbf, 0x44, 0xec, 0x6b,
	0x18, 0xaf, 0x83, 0xc1, 0x02, 0x87, 0x48, 0xcf, 0x2c, 0x6a, 0xd9, 0xea, 0x02, 0x59, 0x57, 0x7a,
	0xf6, 0x12, 0x0b, 0xba, 0xd2, 0xc3, 0x1d, 0x28, 0xf1, 0x48, 0x69, 0x7e, 0xe9, 0x46, 0xde, 0xe0,
	0x91, 0x4a, 0x04, 0x8f, 0xa0, 0x98, 0x44, 0x63, 0x1a, 0x9a, 0xbe, 0xb7, 0x88, 0x56, 0x4a, 0xda,
	0x1a, 0xc2, 0x26, 0x94, 0xc2, 0xc8, 0xf7, 0x89, 0x3c, 0x35, 0x4b, 0x3a, 0xa2, 0xab, 0x12, 0x37,
	0xa0, 0x3a, 0xa6, 0xe1, 0x48, 0x32, 0xa1, 0x18, 0x0f, 0xcc, 0x72, 0x1a, 0x60, 0x66, 0x0b, 0xaf,
	0x03, 0xce, 0x94, 0x8e, 0x90, 0xd4, 0x65, 0x1f, 0xcc, 0x8a, 0x06, 0x6f, 0x67, 0x3a, 0x43, 0xdd,
	0x98, 0xc5, 0xc3, 0xc8, 0x4d, 0x70, 0x98, 0xc3, 0xf7, 0x74, 0x03, 0xaf, 0x41, 0x85, 0x48, 0xcf,
	0xe1, 0x72, 0x4c, 0xa5, 0x59, 0x6d, 0x14, 0x5a, 0x15, 0xbb, 0x4c, 0xa4, 0xb7, 0x9b, 0xd4, 0xf5,
	0x5d, 0x28, 0x5f, 0x25, 0x8b, 0x31, 0x14, 0x33, 0x47, 0xac, 0xd7, 0xb8, 0x03, 0x77, 0xc6, 0x54,
	0x48, 0x3a, 0x22, 0xfa, 0x5b, 0x3e, 0x0d, 0x43, 0xe2, 0x51, 0x7d, 0xc8, 0x15, 0x1b, 0x67, 0x5a,
	0xaf, 0xd2, 0x4e, 0xfd, 0x0d, 0x14, 0x92, 0xec, 0x16, 0x79, 0xad, 0x41, 0x45, 0xd2, 0x64, 0xe5,
	0x28, 0x7e, 0xe9, 0x50, 0x4e, 0x37, 0xf6, 0xf9, 0x6c, 0x4a, 0x85, 0xb9, 0x94, 0xea, 0x9f, 0x11,
	0x14, 0x93, 0xc0, 0xff, 0xdf, 0xfb, 0x29, 0xac, 0x8c, 0xa9, 0x4b, 0xa2, 0x89, 0x4a, 0xc7, 0x5c,
	0xbb, 0x57, 0x37, 0xee, 0xfe, 0x73, 0xa2, 0x4a, 0xc9, 0x83, 0xa4, 0x69, 0x2f, 0x5f, 0xb2, 0xba,
	0x9a, 0xfd, 0xaf, 0xe2, 0xdc, 0x7f, 0x35, 0x9f, 0x03, 0x4c, 0x27, 0x1b, 0xaf, 0x02, 0xee, 0xf5,
	0x9f, 0x75, 0x5f, 0x6f, 0xef, 0x3b, 0x07, 0x83, 0xbd, 0xc1, 0xd6, 0x60, 0x7b, 0xb0, 0xff, 0xb6,
	0x96, 0xc3, 0x55, 0x28, 0xe9, 0x7a, 0xbb, 0x5f, 0x43, 0xb8, 0x0c, 0xc5, 0xbd, 0x97, 0x83, 0x61,
	0x2d, 0x8f, 0x01, 0x8c, 0x17, 0x83, 0x5e, 0xaf, 0xbf, 0x53, 0x2b, 0x34, 0xd7, 0xa1, 0x94, 0xce,
	0x55, 0x88, 0x9b, 0x90, 0xe7, 0xc2, 0x44, 0x7a, 0xf0, 0xf0, 0xfc, 0xe0, 0xd9, 0x79, 0x2e, 0xb6,
	0xbe, 0xa0, 0xb3, 0x73, 0x2b, 0xf7, 0xfd, 0xdc, 0xca, 0x5d, 0x9c, 0x5b, 0xe8, 0x63, 0x6c, 0xa1,
	0xaf, 0xb1, 0x85, 0xbe, 0xc5, 0x16, 0x3a, 0x8b, 0x2d, 0xf4, 0x23, 0xb6, 0xd0, 0xaf, 0xd8, 0xca,
	0x5d, 0xc4, 0x16, 0xfa, 0xf4, 0xd3, 0xca, 0x81, 0xc9, 0xa5, 0x97, 0x75, 0xba, 0xbe, 0xff, 0x5b,
	0xcb, 0xa9, 0xe9, 0x30, 0xb9, 0xfb, 0xe1, 0x10, 0xbd, 0xdb, 0xf4, 0x98, 0x3a, 0x8a, 0x0e, 0xdb,
	0x23, 0xee, 0x77, 0x32, 0xaf, 0xc6, 0xe2, 0xa5, 0xc7, 0x67, 0x9e, 0x93, 0x3f, 0x08, 0x1d, 0x1a,
	0xfa, 0x1d, 0x79, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x7e, 0xee, 0xa7, 0xaa, 0x04, 0x00,
	0x00,
}
